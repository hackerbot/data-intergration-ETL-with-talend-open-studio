// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package chap_7.lesson_10_adding_context_parameters_with_tmsg_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
import java.io.*;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Lesson_10_Adding_context_parameters_with_tMsg Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class Lesson_10_Adding_context_parameters_with_tMsg implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}
		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (outputDir != null) {

				this.setProperty("outputDir", outputDir.toString());

			}

			if (inputFile != null) {

				this.setProperty("inputFile", inputFile.toString());

			}

		}

		public String inputDir;
		public String getInputDir() {
			return this.inputDir;
		}

		public String outputDir;
		public String getOutputDir() {
			return this.outputDir;
		}

		public String inputFile;
		public String getInputFile() {
			return this.inputFile;
		}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Lesson_10_Adding_context_parameters_with_tMsg";
	private final String projectName = "CHAP_7";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Lesson_10_Adding_context_parameters_with_tMsg.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									Lesson_10_Adding_context_parameters_with_tMsg.this,
									new Object[]{e, currentComponent, globalMap});
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSystem_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSystem_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMsgBox_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMsgBox_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tConvertType_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSampleRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMsgBox_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMsgBox_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMsgBox_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMsgBox_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMsgBox_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMsgBox_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDenormalize_1_DenormalizeOut_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);

	}

	public void tDenormalize_1_ArrayIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSystem_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}
	public void tMsgBox_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}
	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}
	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}
	public void tMsgBox_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}
	public void tMsgBox_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}
	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}
	public void tMsgBox_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSystem_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSystem_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSystem_1 begin ] start
				 */

				ok_Hash.put("tSystem_1", false);
				start_Hash.put("tSystem_1", System.currentTimeMillis());

				currentComponent = "tSystem_1";

				int tos_count_tSystem_1 = 0;

				Runtime runtime_tSystem_1 = Runtime.getRuntime();

				String[] env_tSystem_1 = null;
				java.util.Map<String, String> envMap_tSystem_1 = System
						.getenv();
				java.util.Map<String, String> envMapClone_tSystem_1 = new java.util.HashMap();
				envMapClone_tSystem_1.putAll(envMap_tSystem_1);

				final Process ps_tSystem_1 = runtime_tSystem_1.exec(
						"cmd /c DIR /B", env_tSystem_1, new java.io.File(
								context.inputDir));

				globalMap.remove("tSystem_1_OUTPUT");
				globalMap.remove("tSystem_1_ERROROUTPUT");

				Thread normal_tSystem_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tSystem_1.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {

									System.out.println(line);

									if (globalMap.get("tSystem_1_OUTPUT") != null) {
										globalMap
												.put("tSystem_1_OUTPUT",
														(String) globalMap
																.get("tSystem_1_OUTPUT")
																+ "\n" + line);
									} else {
										globalMap.put("tSystem_1_OUTPUT", line);
									}

								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {

							ioe.printStackTrace();
						}
					}
				};
				normal_tSystem_1.start();

				Thread error_tSystem_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tSystem_1.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {

									System.err.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {

							ioe.printStackTrace();
						}
					}
				};
				error_tSystem_1.start();
				if (ps_tSystem_1.getOutputStream() != null) {
					ps_tSystem_1.getOutputStream().close();
				}
				ps_tSystem_1.waitFor();
				normal_tSystem_1.join(10000);
				error_tSystem_1.join(10000);

				/**
				 * [tSystem_1 begin ] stop
				 */

				/**
				 * [tSystem_1 main ] start
				 */

				currentComponent = "tSystem_1";

				tos_count_tSystem_1++;

				/**
				 * [tSystem_1 main ] stop
				 */

				/**
				 * [tSystem_1 end ] start
				 */

				currentComponent = "tSystem_1";

				globalMap.put("tSystem_1_EXIT_VALUE", ps_tSystem_1.exitValue());

				ok_Hash.put("tSystem_1", true);
				end_Hash.put("tSystem_1", System.currentTimeMillis());

				/**
				 * [tSystem_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tSystem_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tMsgBox_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSystem_1 finally ] start
				 */

				currentComponent = "tSystem_1";

				/**
				 * [tSystem_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSystem_1_SUBPROCESS_STATE", 1);
	}

	public void tMsgBox_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMsgBox_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMsgBox_4 begin ] start
				 */

				ok_Hash.put("tMsgBox_4", false);
				start_Hash.put("tMsgBox_4", System.currentTimeMillis());

				currentComponent = "tMsgBox_4";

				int tos_count_tMsgBox_4 = 0;

				/**
				 * [tMsgBox_4 begin ] stop
				 */

				/**
				 * [tMsgBox_4 main ] start
				 */

				currentComponent = "tMsgBox_4";

				int messageIcontMsgBox_4 = javax.swing.JOptionPane.QUESTION_MESSAGE;
				String titletMsgBox_4 = "Specify input File";
				String messagetMsgBox_4 = "Hello world!";
				String resulttMsgBox_4 = null;

				resulttMsgBox_4 = javax.swing.JOptionPane.showInputDialog(null,
						"Please Enter the name of the file to be used as input from the list below:\n"
								+ ((String) globalMap.get("tSystem_1_OUTPUT")),
						titletMsgBox_4, messageIcontMsgBox_4);

				globalMap.put("tMsgBox_4_RESULT", resulttMsgBox_4);

				tos_count_tMsgBox_4++;

				/**
				 * [tMsgBox_4 main ] stop
				 */

				/**
				 * [tMsgBox_4 end ] start
				 */

				currentComponent = "tMsgBox_4";

				ok_Hash.put("tMsgBox_4", true);
				end_Hash.put("tMsgBox_4", System.currentTimeMillis());

				tJava_2Process(globalMap);

				/**
				 * [tMsgBox_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMsgBox_4 finally ] start
				 */

				currentComponent = "tMsgBox_4";

				/**
				 * [tMsgBox_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMsgBox_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				if (("").equals(((String) globalMap.get("tMsgBox_4_RESULT")))
						|| ((String) globalMap.get("tMsgBox_4_RESULT")) == null) {
					System.out
							.println("No file name has been specified!\nThe job will be terminated.");
					System.exit(1);
				} else {
					context.inputFile = context.inputDir
							+ ((String) globalMap.get("tMsgBox_4_RESULT"));
				}

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct
			implements
				routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];
		static byte[] commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length) {
					if (length < 1024
							&& commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length == 0) {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[1024];
					} else {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length);
				strReturn = new String(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtDenormalize_1
			implements
				routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
		final static byte[] commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];
		static byte[] commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length) {
					if (length < 1024
							&& commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length == 0) {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[1024];
					} else {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length);
				strReturn = new String(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtDenormalize_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct
			implements
				routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];
		static byte[] commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length) {
					if (length < 1024
							&& commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length == 0) {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[1024];
					} else {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length);
				strReturn = new String(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg) {

				try {

					int length = 0;

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct
			implements
				routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];
		static byte[] commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length) {
					if (length < 1024
							&& commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length == 0) {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[1024];
					} else {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length);
				strReturn = new String(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg) {

				try {

					int length = 0;

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct
			implements
				routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];
		static byte[] commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];

		public String TRANSACTION_TYPE;

		public String getTRANSACTION_TYPE() {
			return this.TRANSACTION_TYPE;
		}

		public String TRANSACTION_DATE;

		public String getTRANSACTION_DATE() {
			return this.TRANSACTION_DATE;
		}

		public String TRANSACTION_REFERENCE;

		public String getTRANSACTION_REFERENCE() {
			return this.TRANSACTION_REFERENCE;
		}

		public String MERCHANT;

		public String getMERCHANT() {
			return this.MERCHANT;
		}

		public Double TOTAL;

		public Double getTOTAL() {
			return this.TOTAL;
		}

		public java.util.Date DATE;

		public java.util.Date getDATE() {
			return this.DATE;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length) {
					if (length < 1024
							&& commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length == 0) {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[1024];
					} else {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length);
				strReturn = new String(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg) {

				try {

					int length = 0;

					this.TRANSACTION_TYPE = readString(dis);

					this.TRANSACTION_DATE = readString(dis);

					this.TRANSACTION_REFERENCE = readString(dis);

					this.MERCHANT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TOTAL = null;
					} else {
						this.TOTAL = dis.readDouble();
					}

					this.DATE = readDate(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TRANSACTION_TYPE, dos);

				// String

				writeString(this.TRANSACTION_DATE, dos);

				// String

				writeString(this.TRANSACTION_REFERENCE, dos);

				// String

				writeString(this.MERCHANT, dos);

				// Double

				if (this.TOTAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TOTAL);
				}

				// java.util.Date

				writeDate(this.DATE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TRANSACTION_TYPE=" + TRANSACTION_TYPE);
			sb.append(",TRANSACTION_DATE=" + TRANSACTION_DATE);
			sb.append(",TRANSACTION_REFERENCE=" + TRANSACTION_REFERENCE);
			sb.append(",MERCHANT=" + MERCHANT);
			sb.append(",TOTAL=" + String.valueOf(TOTAL));
			sb.append(",DATE=" + String.valueOf(DATE));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct
			implements
				routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];
		static byte[] commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];

		public String TRANSACTION_TYPE;

		public String getTRANSACTION_TYPE() {
			return this.TRANSACTION_TYPE;
		}

		public String TRANSACTION_DATE;

		public String getTRANSACTION_DATE() {
			return this.TRANSACTION_DATE;
		}

		public String TRANSACTION_REFERENCE;

		public String getTRANSACTION_REFERENCE() {
			return this.TRANSACTION_REFERENCE;
		}

		public String MERCHANT;

		public String getMERCHANT() {
			return this.MERCHANT;
		}

		public Double TOTAL;

		public Double getTOTAL() {
			return this.TOTAL;
		}

		public java.util.Date DATE;

		public java.util.Date getDATE() {
			return this.DATE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length) {
					if (length < 1024
							&& commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length == 0) {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[1024];
					} else {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length);
				strReturn = new String(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg) {

				try {

					int length = 0;

					this.TRANSACTION_TYPE = readString(dis);

					this.TRANSACTION_DATE = readString(dis);

					this.TRANSACTION_REFERENCE = readString(dis);

					this.MERCHANT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TOTAL = null;
					} else {
						this.TOTAL = dis.readDouble();
					}

					this.DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TRANSACTION_TYPE, dos);

				// String

				writeString(this.TRANSACTION_DATE, dos);

				// String

				writeString(this.TRANSACTION_REFERENCE, dos);

				// String

				writeString(this.MERCHANT, dos);

				// Double

				if (this.TOTAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TOTAL);
				}

				// java.util.Date

				writeDate(this.DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TRANSACTION_TYPE=" + TRANSACTION_TYPE);
			sb.append(",TRANSACTION_DATE=" + TRANSACTION_DATE);
			sb.append(",TRANSACTION_REFERENCE=" + TRANSACTION_REFERENCE);
			sb.append(",MERCHANT=" + MERCHANT);
			sb.append(",TOTAL=" + String.valueOf(TOTAL));
			sb.append(",DATE=" + String.valueOf(DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct
			implements
				routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];
		static byte[] commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[0];

		public String TRANSACTION_TYPE;

		public String getTRANSACTION_TYPE() {
			return this.TRANSACTION_TYPE;
		}

		public String TRANSACTION_DATE;

		public String getTRANSACTION_DATE() {
			return this.TRANSACTION_DATE;
		}

		public String TRANSACTION_REFERENCE;

		public String getTRANSACTION_REFERENCE() {
			return this.TRANSACTION_REFERENCE;
		}

		public String MERCHANT;

		public String getMERCHANT() {
			return this.MERCHANT;
		}

		public String TOTAL;

		public String getTOTAL() {
			return this.TOTAL;
		}

		public String DATE;

		public String getDATE() {
			return this.DATE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length) {
					if (length < 1024
							&& commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg.length == 0) {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[1024];
					} else {
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length);
				strReturn = new String(
						commonByteArray_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHAP_7_Lesson_10_Adding_context_parameters_with_tMsg) {

				try {

					int length = 0;

					this.TRANSACTION_TYPE = readString(dis);

					this.TRANSACTION_DATE = readString(dis);

					this.TRANSACTION_REFERENCE = readString(dis);

					this.MERCHANT = readString(dis);

					this.TOTAL = readString(dis);

					this.DATE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TRANSACTION_TYPE, dos);

				// String

				writeString(this.TRANSACTION_DATE, dos);

				// String

				writeString(this.TRANSACTION_REFERENCE, dos);

				// String

				writeString(this.MERCHANT, dos);

				// String

				writeString(this.TOTAL, dos);

				// String

				writeString(this.DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TRANSACTION_TYPE=" + TRANSACTION_TYPE);
			sb.append(",TRANSACTION_DATE=" + TRANSACTION_DATE);
			sb.append(",TRANSACTION_REFERENCE=" + TRANSACTION_REFERENCE);
			sb.append(",MERCHANT=" + MERCHANT);
			sb.append(",TOTAL=" + TOTAL);
			sb.append(",DATE=" + DATE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}
	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();
				row6Struct row6 = new row6Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tDenormalize_1_DenormalizeOut begin ] start
				 */

				ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
				start_Hash.put("tDenormalize_1_DenormalizeOut",
						System.currentTimeMillis());

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_DenormalizeOut";

				int tos_count_tDenormalize_1_DenormalizeOut = 0;

				class DenormalizeStructtDenormalize_1_DenormalizeOut {
					StringBuilder errorMessage = new StringBuilder();
				}
				DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;

				/**
				 * [tDenormalize_1_DenormalizeOut begin ] stop
				 */

				/**
				 * [tSampleRow_1 begin ] start
				 */

				ok_Hash.put("tSampleRow_1", false);
				start_Hash.put("tSampleRow_1", System.currentTimeMillis());

				currentComponent = "tSampleRow_1";

				int tos_count_tSampleRow_1 = 0;

				String[] rangetSampleRow_1 = "1..5".split(",");
				java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

				Integer nb_line_tSampleRow_1 = 0;

				for (int i = 0; i < rangetSampleRow_1.length; i++) {

					if (rangetSampleRow_1[i].matches("\\d+")) {

						rangeSettSampleRow_1.add(Integer
								.valueOf(rangetSampleRow_1[i]));

					} else if (rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")) {

						String[] edgetSampleRow_1 = rangetSampleRow_1[i]
								.split("\\.\\.");

						for (int j = Integer.valueOf(edgetSampleRow_1[0])
								.intValue(); j < Integer.valueOf(
								edgetSampleRow_1[1]).intValue() + 1; j++) {
							rangeSettSampleRow_1.add(Integer.valueOf(j));
						}
					} else {

					}

				}

				/**
				 * [tSampleRow_1 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.outputDir + jobName + "_out.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {

						dir_tFileOutputDelimited_1.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"ISO-8859-15"));

				if (filetFileOutputDelimited_1.length() == 0) {

					outtFileOutputDelimited_1.write("TRANSACTION_TYPE");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("TRANSACTION_DATE");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("TRANSACTION_REFERENCE");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("MERCHANT");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("TOTAL");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("DATE");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);

				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());

				currentComponent = "tConvertType_1";

				int tos_count_tConvertType_1 = 0;

				int nb_line_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.inputFile;
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.inputFile, "US-ASCII", ",", "\n",
								false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.TRANSACTION_TYPE = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.TRANSACTION_DATE = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.TRANSACTION_REFERENCE = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.MERCHANT = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.TOTAL = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.DATE = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tConvertType_1 main ] start
							 */

							currentComponent = "tConvertType_1";

							row3 = new row3Struct();
							String errorCode_tConvertType_1 = "";
							String errorMessage_tConvertType_1 = "";

							row2 = new row2Struct();
							boolean bHasError_tConvertType_1 = false;
							try {
								row2.TRANSACTION_TYPE = TypeConvert
										.String2String(row1.TRANSACTION_TYPE);
								row3.TRANSACTION_TYPE = row2.TRANSACTION_TYPE;
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								if (("").equals(errorMessage_tConvertType_1)) {
									errorMessage_tConvertType_1 = "TRANSACTION_TYPE"
											+ ":" + e.getMessage();
								} else {
									errorMessage_tConvertType_1 = errorMessage_tConvertType_1
											+ ";"
											+ "TRANSACTION_TYPE"
											+ ":"
											+ e.getMessage();
								}
							}
							try {
								row2.TRANSACTION_DATE = TypeConvert
										.String2String(row1.TRANSACTION_DATE);
								row3.TRANSACTION_DATE = row2.TRANSACTION_DATE;
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								if (("").equals(errorMessage_tConvertType_1)) {
									errorMessage_tConvertType_1 = "TRANSACTION_DATE"
											+ ":" + e.getMessage();
								} else {
									errorMessage_tConvertType_1 = errorMessage_tConvertType_1
											+ ";"
											+ "TRANSACTION_DATE"
											+ ":"
											+ e.getMessage();
								}
							}
							try {
								row2.TRANSACTION_REFERENCE = TypeConvert
										.String2String(row1.TRANSACTION_REFERENCE);
								row3.TRANSACTION_REFERENCE = row2.TRANSACTION_REFERENCE;
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								if (("").equals(errorMessage_tConvertType_1)) {
									errorMessage_tConvertType_1 = "TRANSACTION_REFERENCE"
											+ ":" + e.getMessage();
								} else {
									errorMessage_tConvertType_1 = errorMessage_tConvertType_1
											+ ";"
											+ "TRANSACTION_REFERENCE"
											+ ":" + e.getMessage();
								}
							}
							try {
								row2.MERCHANT = TypeConvert
										.String2String(row1.MERCHANT);
								row3.MERCHANT = row2.MERCHANT;
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								if (("").equals(errorMessage_tConvertType_1)) {
									errorMessage_tConvertType_1 = "MERCHANT"
											+ ":" + e.getMessage();
								} else {
									errorMessage_tConvertType_1 = errorMessage_tConvertType_1
											+ ";"
											+ "MERCHANT"
											+ ":"
											+ e.getMessage();
								}
							}
							try {
								row2.TOTAL = TypeConvert
										.String2Double(row1.TOTAL);
								row3.TOTAL = row2.TOTAL;
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								if (("").equals(errorMessage_tConvertType_1)) {
									errorMessage_tConvertType_1 = "TOTAL" + ":"
											+ e.getMessage();
								} else {
									errorMessage_tConvertType_1 = errorMessage_tConvertType_1
											+ ";"
											+ "TOTAL"
											+ ":"
											+ e.getMessage();
								}
							}
							try {
								row2.DATE = TypeConvert.String2Date(row1.DATE,
										"dd/MM/yyyy");
								row3.DATE = row2.DATE;
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								if (("").equals(errorMessage_tConvertType_1)) {
									errorMessage_tConvertType_1 = "DATE" + ":"
											+ e.getMessage();
								} else {
									errorMessage_tConvertType_1 = errorMessage_tConvertType_1
											+ ";"
											+ "DATE"
											+ ":"
											+ e.getMessage();
								}
							}
							if (bHasError_tConvertType_1) {
								row2 = null;
							}

							if (errorMessage_tConvertType_1.length() > 0) {
								if (errorMessage_tConvertType_1
										.contains("Can't support convert")) {
									errorCode_tConvertType_1 = "1"; // ConvertTypeNotSupportException
								} else {
									errorCode_tConvertType_1 = "2"; // Other
																	// Java
																	// exception
								}
								row3.errorCode = errorCode_tConvertType_1;
								row3.errorMessage = errorMessage_tConvertType_1
										+ " - Line: "
										+ tos_count_tConvertType_1;
							} else {
								row3 = null;
							}
							errorMessage_tConvertType_1 = "";
							nb_line_tConvertType_1++;

							tos_count_tConvertType_1++;

							/**
							 * [tConvertType_1 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tFilterColumns_1 main ] start
								 */

								currentComponent = "tFilterColumns_1";

								row4.errorMessage = row3.errorMessage;

								nb_line_tFilterColumns_1++;

								tos_count_tFilterColumns_1++;

								/**
								 * [tFilterColumns_1 main ] stop
								 */

								/**
								 * [tSampleRow_1 main ] start
								 */

								currentComponent = "tSampleRow_1";

								nb_line_tSampleRow_1++;

								if (!rangeSettSampleRow_1
										.contains(nb_line_tSampleRow_1)) {
									row5 = null;
								} else {
									row5 = new row5Struct();

									row5.errorMessage = row4.errorMessage;

								}

								tos_count_tSampleRow_1++;

								/**
								 * [tSampleRow_1 main ] stop
								 */
								// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tDenormalize_1_DenormalizeOut main ]
									 * start
									 */

									currentVirtualComponent = "tDenormalize_1";

									currentComponent = "tDenormalize_1_DenormalizeOut";

									if (denormalize_result_tDenormalize_1_DenormalizeOut == null) {
										denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();
										denormalize_result_tDenormalize_1_DenormalizeOut.errorMessage
												.append(row5.errorMessage);

									} else {
										denormalize_result_tDenormalize_1_DenormalizeOut.errorMessage
												.append(";\n").append(
														row5.errorMessage);

									}

									tos_count_tDenormalize_1_DenormalizeOut++;

									/**
									 * [tDenormalize_1_DenormalizeOut main ]
									 * stop
									 */

								} // End of branch "row5"

							} // End of branch "row3"

							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

								if (row2.TRANSACTION_TYPE != null) {

									sb_tFileOutputDelimited_1.append(

									row2.TRANSACTION_TYPE

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row2.TRANSACTION_DATE != null) {

									sb_tFileOutputDelimited_1.append(

									row2.TRANSACTION_DATE

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row2.TRANSACTION_REFERENCE != null) {

									sb_tFileOutputDelimited_1.append(

									row2.TRANSACTION_REFERENCE

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row2.MERCHANT != null) {

									sb_tFileOutputDelimited_1.append(

									row2.MERCHANT

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row2.TOTAL != null) {

									sb_tFileOutputDelimited_1.append(

									row2.TOTAL

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row2.DATE != null) {

									sb_tFileOutputDelimited_1.append(

									FormatterUtils.format_Date(row2.DATE,
											"dd/MM/yyyy")

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_1",
										nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1
										.write(sb_tFileOutputDelimited_1
												.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

							} // End of branch "row2"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.inputFile) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE",
						nb_line_tFilterColumns_1);

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFilterColumns_1_NB_LINE")) > 10) {

					tMsgBox_3Process(globalMap);
				}

				tJava_1Process(globalMap);

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tSampleRow_1 end ] start
				 */

				currentComponent = "tSampleRow_1";

				ok_Hash.put("tSampleRow_1", true);
				end_Hash.put("tSampleRow_1", System.currentTimeMillis());

				/**
				 * [tSampleRow_1 end ] stop
				 */

				/**
				 * [tDenormalize_1_DenormalizeOut end ] start
				 */

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_DenormalizeOut";

				java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
				if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
					// generate result begin
					OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();

					denormalize_row_tDenormalize_1_DenormalizeOut.errorMessage = denormalize_result_tDenormalize_1_DenormalizeOut.errorMessage
							.toString();

					// in the deepest end

					result_list_tDenormalize_1_DenormalizeOut
							.add(denormalize_row_tDenormalize_1_DenormalizeOut);

				}
				// generate result end
				globalMap.put("tDenormalize_1",
						result_list_tDenormalize_1_DenormalizeOut);
				globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE",
						result_list_tDenormalize_1_DenormalizeOut.size());

				ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
				end_Hash.put("tDenormalize_1_DenormalizeOut",
						System.currentTimeMillis());

				/**
				 * [tDenormalize_1_DenormalizeOut end ] stop
				 */

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tDenormalize_1_ArrayIn begin ] start
				 */

				ok_Hash.put("tDenormalize_1_ArrayIn", false);
				start_Hash.put("tDenormalize_1_ArrayIn",
						System.currentTimeMillis());

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_ArrayIn";

				int tos_count_tDenormalize_1_ArrayIn = 0;

				int nb_line_tDenormalize_1_ArrayIn = 0;
				java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>) globalMap
						.get("tDenormalize_1");
				if (list_tDenormalize_1_ArrayIn == null) {
					list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
				}
				for (OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn) {

					row6.errorCode = row_tDenormalize_1_ArrayIn.errorCode;

					row6.errorMessage = row_tDenormalize_1_ArrayIn.errorMessage;

					/**
					 * [tDenormalize_1_ArrayIn begin ] stop
					 */

					/**
					 * [tDenormalize_1_ArrayIn main ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_ArrayIn";

					tos_count_tDenormalize_1_ArrayIn++;

					/**
					 * [tDenormalize_1_ArrayIn main ] stop
					 */

					/**
					 * [tFlowToIterate_1 main ] start
					 */

					currentComponent = "tFlowToIterate_1";

					globalMap.put("row6.errorCode", row6.errorCode);
					nb_line_tFlowToIterate_1++;

					globalMap.put("row6.errorMessage", row6.errorMessage);
					nb_line_tFlowToIterate_1++;

					counter_tFlowToIterate_1++;
					globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
							counter_tFlowToIterate_1);

					tos_count_tFlowToIterate_1++;

					/**
					 * [tFlowToIterate_1 main ] stop
					 */

					/**
					 * [tDenormalize_1_ArrayIn end ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_ArrayIn";

					nb_line_tDenormalize_1_ArrayIn++;
				}
				globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",
						nb_line_tDenormalize_1_ArrayIn);

				ok_Hash.put("tDenormalize_1_ArrayIn", true);
				end_Hash.put("tDenormalize_1_ArrayIn",
						System.currentTimeMillis());

				/**
				 * [tDenormalize_1_ArrayIn end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				if (((String) globalMap.get("tMsgBox_3_RESULT")).equals("0")) {

					tMsgBox_2Process(globalMap);
				}

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				tMsgBox_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tDenormalize_1_ArrayIn"
			globalMap.remove("tDenormalize_1");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tConvertType_1 finally ] start
				 */

				currentComponent = "tConvertType_1";

				/**
				 * [tConvertType_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tSampleRow_1 finally ] start
				 */

				currentComponent = "tSampleRow_1";

				/**
				 * [tSampleRow_1 finally ] stop
				 */

				/**
				 * [tDenormalize_1_DenormalizeOut finally ] start
				 */

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_DenormalizeOut";

				/**
				 * [tDenormalize_1_DenormalizeOut finally ] stop
				 */

				/**
				 * [tDenormalize_1_ArrayIn finally ] start
				 */

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_ArrayIn";

				/**
				 * [tDenormalize_1_ArrayIn finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tMsgBox_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMsgBox_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMsgBox_2 begin ] start
				 */

				ok_Hash.put("tMsgBox_2", false);
				start_Hash.put("tMsgBox_2", System.currentTimeMillis());

				currentComponent = "tMsgBox_2";

				int tos_count_tMsgBox_2 = 0;

				/**
				 * [tMsgBox_2 begin ] stop
				 */

				/**
				 * [tMsgBox_2 main ] start
				 */

				currentComponent = "tMsgBox_2";

				int messageIcontMsgBox_2 = javax.swing.JOptionPane.INFORMATION_MESSAGE;
				String titletMsgBox_2 = "Talend Open Studio";
				String messagetMsgBox_2 = "\nError message(s): \n"
						+ ((String) globalMap.get("row6.errorMessage")) + ";\n"
						+ globalMap.get("dots");
				String resulttMsgBox_2 = null;

				javax.swing.JOptionPane.showMessageDialog(null,
						messagetMsgBox_2, titletMsgBox_2, messageIcontMsgBox_2);
				resulttMsgBox_2 = String.valueOf(1);

				globalMap.put("tMsgBox_2_RESULT", resulttMsgBox_2);

				tos_count_tMsgBox_2++;

				/**
				 * [tMsgBox_2 main ] stop
				 */

				/**
				 * [tMsgBox_2 end ] start
				 */

				currentComponent = "tMsgBox_2";

				ok_Hash.put("tMsgBox_2", true);
				end_Hash.put("tMsgBox_2", System.currentTimeMillis());

				/**
				 * [tMsgBox_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMsgBox_2 finally ] start
				 */

				currentComponent = "tMsgBox_2";

				/**
				 * [tMsgBox_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMsgBox_2_SUBPROCESS_STATE", 1);
	}

	public void tMsgBox_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMsgBox_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMsgBox_3 begin ] start
				 */

				ok_Hash.put("tMsgBox_3", false);
				start_Hash.put("tMsgBox_3", System.currentTimeMillis());

				currentComponent = "tMsgBox_3";

				int tos_count_tMsgBox_3 = 0;

				/**
				 * [tMsgBox_3 begin ] stop
				 */

				/**
				 * [tMsgBox_3 main ] start
				 */

				currentComponent = "tMsgBox_3";

				int messageIcontMsgBox_3 = javax.swing.JOptionPane.QUESTION_MESSAGE;
				String titletMsgBox_3 = "Data Type conversion Rejects";
				String messagetMsgBox_3 = "There are more then 10 Rejects.\nWould you like to see more details?";
				String resulttMsgBox_3 = null;

				resulttMsgBox_3 = String.valueOf(javax.swing.JOptionPane
						.showOptionDialog(null, messagetMsgBox_3,
								titletMsgBox_3,
								javax.swing.JOptionPane.YES_NO_OPTION,
								messageIcontMsgBox_3, null, new String[]{"Yes",
										"No"}, null));

				globalMap.put("tMsgBox_3_RESULT", resulttMsgBox_3);

				tos_count_tMsgBox_3++;

				/**
				 * [tMsgBox_3 main ] stop
				 */

				/**
				 * [tMsgBox_3 end ] start
				 */

				currentComponent = "tMsgBox_3";

				ok_Hash.put("tMsgBox_3", true);
				end_Hash.put("tMsgBox_3", System.currentTimeMillis());

				/**
				 * [tMsgBox_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMsgBox_3 finally ] start
				 */

				currentComponent = "tMsgBox_3";

				/**
				 * [tMsgBox_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMsgBox_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				int rejectCount = ((Integer) globalMap
						.get("tFilterColumns_1_NB_LINE"));
				String dots;

				if (rejectCount > 5) {
					dots = "...";
				} else {
					dots = "";
				}

				globalMap.put("dots", dots);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tMsgBox_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMsgBox_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMsgBox_1 begin ] start
				 */

				ok_Hash.put("tMsgBox_1", false);
				start_Hash.put("tMsgBox_1", System.currentTimeMillis());

				currentComponent = "tMsgBox_1";

				int tos_count_tMsgBox_1 = 0;

				/**
				 * [tMsgBox_1 begin ] stop
				 */

				/**
				 * [tMsgBox_1 main ] start
				 */

				currentComponent = "tMsgBox_1";

				int messageIcontMsgBox_1 = javax.swing.JOptionPane.INFORMATION_MESSAGE;
				String titletMsgBox_1 = "Notification";
				String messagetMsgBox_1 = "Job finished";
				String resulttMsgBox_1 = null;

				javax.swing.JOptionPane.showMessageDialog(null,
						messagetMsgBox_1, titletMsgBox_1, messageIcontMsgBox_1);
				resulttMsgBox_1 = String.valueOf(1);

				globalMap.put("tMsgBox_1_RESULT", resulttMsgBox_1);

				tos_count_tMsgBox_1++;

				/**
				 * [tMsgBox_1 main ] stop
				 */

				/**
				 * [tMsgBox_1 end ] start
				 */

				currentComponent = "tMsgBox_1";

				ok_Hash.put("tMsgBox_1", true);
				end_Hash.put("tMsgBox_1", System.currentTimeMillis());

				/**
				 * [tMsgBox_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMsgBox_1 finally ] start
				 */

				currentComponent = "tMsgBox_1";

				/**
				 * [tMsgBox_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMsgBox_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Lesson_10_Adding_context_parameters_with_tMsg Lesson_10_Adding_context_parameters_with_tMsgClass = new Lesson_10_Adding_context_parameters_with_tMsg();

		int exitCode = Lesson_10_Adding_context_parameters_with_tMsgClass
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][]{{Integer.toString(exitCode)}};

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Lesson_10_Adding_context_parameters_with_tMsg.class
					.getClassLoader().getResourceAsStream(
							"chap_7/lesson_10_adding_context_parameters_with_tmsg_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.inputDir = (String) context.getProperty("inputDir");
			context.outputDir = (String) context.getProperty("outputDir");
			context.inputFile = (String) context.getProperty("inputFile");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("outputDir")) {
				context.outputDir = (String) parentContextMap.get("outputDir");
			}
			if (parentContextMap.containsKey("inputFile")) {
				context.inputFile = (String) parentContextMap.get("inputFile");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tSystem_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSystem_1) {
			globalMap.put("tSystem_1_SUBPROCESS_STATE", -1);

			e_tSystem_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Lesson_10_Adding_context_parameters_with_tMsg");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = {{"\\\\", "\\"}, {"\\n", "\n"},
			{"\\'", "\'"}, {"\\r", "\r"}, {"\\f", "\f"}, {"\\b", "\b"},
			{"\\t", "\t"}};
	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 109556 characters generated by Talend Open Studio for Data Integration on the
 * April 3, 2015 6:23:38 PM BST
 ************************************************************************************************/
